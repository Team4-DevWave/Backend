const request = require('supertest');
const app = require('./app'); 
const Subreddit = require('./models/subreddit');

describe('GET /subreddit_info/:id', () => {
  it('should return subreddit information', async () => {
    // Create a test subreddit
    const subreddit = new Subreddit({ name: 'test_subreddit', description: 'Test description' });
    await subreddit.save();

    // Make a GET request to retrieve subreddit information
    const response = await request(app).get(`/subreddit_info/${subreddit._id}`);

    // Expect response status to be 200 and check the subreddit data
    expect(response.status).toBe(200);
    expect(response.body.name).toBe('test_subreddit');
    expect(response.body.description).toBe('Test description');
  });

  it('should return 404 if subreddit ID does not exist', async () => {
    // Make a GET request with a non-existing subreddit ID
    const response = await request(app).get('/subreddit_info/123456789012345678901234');

    // Expect response status to be 404
    expect(response.status).toBe(404);
  });
});

describe('POST /report', () => {
  it('should report a post', async () => {
    // Assuming postId is a valid post ID
    const postId = '123456789012345678901234';
    const reason = 'Inappropriate content';

    // Make a POST request to report a post
    const response = await request(app)
      .post('/report')
      .send({ postId, reason });

    // Expect response status to be 200 and check the message
    expect(response.status).toBe(200);
    expect(response.body.message).toBe('Post reported successfully');
  });

  it('should return 400 if postId or reason is missing', async () => {
    // Make a POST request with missing postId
    const response1 = await request(app)
      .post('/report')
      .send({ reason: 'Inappropriate content' });

    // Expect response status to be 400
    expect(response1.status).toBe(400);

    // Make a POST request with missing reason
    const response2 = await request(app)
      .post('/report')
      .send({ postId: '123456789012345678901234' });

    // Expect response status to be 400
    expect(response2.status).toBe(400);
  });
});

